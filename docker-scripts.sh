#!/bin/bash

# üê≥ Scripts de Docker para la Aplicaci√≥n de Cumplea√±os
# Este script contiene comandos √∫tiles para manejar la aplicaci√≥n dockerizada

set -e  # Salir si hay alg√∫n error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}üê≥ Scripts de Docker para Perritos Malvados${NC}"
    echo ""
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "Comandos disponibles:"
    echo "  build     - Construir la imagen Docker"
    echo "  run       - Ejecutar el contenedor"
    echo "  stop      - Detener el contenedor"
    echo "  restart   - Reiniciar el contenedor"
    echo "  logs      - Ver logs del contenedor"
    echo "  clean     - Limpiar contenedores e im√°genes"
    echo "  status    - Ver estado de los contenedores"
    echo "  compose   - Usar Docker Compose"
    echo "  help      - Mostrar esta ayuda"
    echo ""
}

# Funci√≥n para construir la imagen
build_image() {
    echo -e "${YELLOW}üî® Construyendo imagen Docker...${NC}"
    docker build -t perritos-malvados:latest .
    echo -e "${GREEN}‚úÖ Imagen construida exitosamente${NC}"
}

# Funci√≥n para ejecutar el contenedor
run_container() {
    echo -e "${YELLOW}üöÄ Ejecutando contenedor...${NC}"
    docker run -d \
        --name perritos-web \
        -p 8080:80 \
        --restart unless-stopped \
        perritos-malvados:latest
    echo -e "${GREEN}‚úÖ Contenedor ejecut√°ndose en http://localhost:8080${NC}"
}

# Funci√≥n para detener el contenedor
stop_container() {
    echo -e "${YELLOW}‚èπÔ∏è  Deteniendo contenedor...${NC}"
    docker stop perritos-web || true
    docker rm perritos-web || true
    echo -e "${GREEN}‚úÖ Contenedor detenido${NC}"
}

# Funci√≥n para reiniciar el contenedor
restart_container() {
    echo -e "${YELLOW}üîÑ Reiniciando contenedor...${NC}"
    stop_container
    run_container
}

# Funci√≥n para ver logs
show_logs() {
    echo -e "${YELLOW}üìã Mostrando logs del contenedor...${NC}"
    docker logs -f perritos-web
}

# Funci√≥n para limpiar
clean_docker() {
    echo -e "${YELLOW}üßπ Limpiando Docker...${NC}"
    docker stop perritos-web || true
    docker rm perritos-web || true
    docker rmi perritos-malvados:latest || true
    echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
}

# Funci√≥n para ver estado
show_status() {
    echo -e "${YELLOW}üìä Estado de los contenedores:${NC}"
    docker ps -a --filter name=perritos-web
    echo ""
    echo -e "${YELLOW}üìä Estado de las im√°genes:${NC}"
    docker images | grep perritos-malvados || echo "No hay im√°genes de perritos-malvados"
}

# Funci√≥n para Docker Compose
use_compose() {
    echo -e "${YELLOW}üêô Usando Docker Compose...${NC}"
    case "${2:-up}" in
        "up")
            docker-compose up -d --build
            echo -e "${GREEN}‚úÖ Servicios ejecut√°ndose${NC}"
            ;;
        "down")
            docker-compose down
            echo -e "${GREEN}‚úÖ Servicios detenidos${NC}"
            ;;
        "logs")
            docker-compose logs -f
            ;;
        "restart")
            docker-compose restart
            echo -e "${GREEN}‚úÖ Servicios reiniciados${NC}"
            ;;
        *)
            echo -e "${RED}‚ùå Comando de compose no reconocido: $2${NC}"
            echo "Comandos disponibles: up, down, logs, restart"
            ;;
    esac
}

# Funci√≥n para verificar Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker no est√° instalado${NC}"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        echo -e "${RED}‚ùå Docker no est√° ejecut√°ndose${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Docker est√° funcionando correctamente${NC}"
}

# Funci√≥n principal
main() {
    check_docker
    
    case "${1:-help}" in
        "build")
            build_image
            ;;
        "run")
            run_container
            ;;
        "stop")
            stop_container
            ;;
        "restart")
            restart_container
            ;;
        "logs")
            show_logs
            ;;
        "clean")
            clean_docker
            ;;
        "status")
            show_status
            ;;
        "compose")
            use_compose "$@"
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"
